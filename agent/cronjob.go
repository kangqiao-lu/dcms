package agent

import (
	"time"

	"github.com/gorhill/cronexpr"
	log "github.com/ngaut/logging"
)

var (
	// what to do when Job timeout
	TriggerIgnore int = 0
	TriggerKill   int = 1

	JobSuccess int = 0
	JobFail    int = 1
	JobTimeout int = 2
	JobRunning int = 3
	JobKilled  int = 4
)

// job for crontab
type CronJob struct {
	Id               int64  `json:"id,omitempty"`              // job id generated by mysql autoincrement
	Name             string `json:"name,omitempty"`            // job name
	CreateUser       string `json:"create_user,omitempty"`     // create by user
	Executor         string `json:"executor,omitempty"`        // job execute file
	ExecutorFlags    string `json:"executor_flags,omitempty"`  // job execute file args
	Signature        string `json:"signature,omitempty"`       // signature for executor by md5sum
	Runner           string `json:"runner,omitempty"`          // su - runner to run, root is forbidden
	Timeout          int64  `json:"timeout,omitempty"`         // timeout
	OnTimeoutTrigger int    `json:"timeout_trigger,omitempty"` // on timeout trigger
	Disabled         bool   `json:"disabled,omitempty"`        // we don't schedule this job when disabled
	Schedule         string `json:"schedule,omitempty"`        // schedule crontab format 分 时  日 月 星期
	WebHookUrl       string `json:"hook,omitempty"`            // we post status to this webhookurl
	MsgFilter        string `json:"msg_filter,omitempty"`      // when stdout contain msg filter, we send mail
	// CreateAt will modify when cronjob update
	CreateAt int64 `json:"create_at,omitempty"` // create timestamp

	expression *cronexpr.Expression `json:"-"` // expression generated by Schedule
	Dcms       *Agent               `json:"-"` // Dcms this CronJob belong to

	SuccessCnt    int    `json:"-"` // success count
	ErrCnt        int    `json:"-"` // failed count
	TimeoutCnt    int    `json:"-"` // timeout count (update success or failed count)
	LastTaskId    string `json:"-"` // last running time ID auto increment
	LastSuccessAt int64  `json:"-"` // last success ts
	LastErrAt     int64  `json:"-"` //last err ts
	LastStatus    int    `json:"-"` //latest new status
	LastExecAt    int64  `json:"-"`
}

// check crontab need
func (cj *CronJob) NeedSchedule() bool {
	if cj.Disabled {
		return false
	}

	expression, err := cronexpr.Parse(cj.Schedule)
	if err != nil {
		log.Warning("crontab parse failed: ", cj.Id, cj.Name)
		cj.Disabled = true
	}
	cj.expression = expression

	if cj.LastExecAt == 0 {
		cj.LastExecAt = cj.CreateAt
	}

	last_run_time := time.Unix(cj.LastExecAt, 0)
	nt := cj.expression.Next(last_run_time)
	// log.Info("cron next run is: ", cj.Id, cj.Name, nt)
	if time.Now().Unix()-nt.Unix() > 20 {
		// log.Info("needschedule true: ", cj.Id, cj.Name, nt)
		return true
	}
	// log.Info("needschedule false: ", cj.Id, cj.Name, nt)
	return false
}

// exec this function when task for this job timeout
func (cj *CronJob) OnTimeout() int {
	return cj.OnTimeoutTrigger
}

// must check crontab  valid  first
func (cj *CronJob) IsValid() bool {
	if _, err := cronexpr.Parse(cj.Schedule); err != nil {
		log.Warning("cron job parse crontab format failed: ", err)
		return false
	}
	if cj.Runner == "root" {
		log.Warning("cron job must run under non-root user, current is: ", cj.Runner)
		return false
	}
	return !cj.Disabled
}
